// Generated by CoffeeScript 1.10.0
(function() {
  var add_user, app, express, fs, http, io, multer, port, randomcolor, remove_user, status, upload, upload_dir;

  express = require('express');

  app = express();

  http = require('http').Server(app);

  io = require('socket.io')(http);

  multer = require('multer');

  fs = require('fs');

  randomcolor = require('randomcolor');

  upload_dir = 'uploads';

  upload = multer({
    dest: upload_dir + '/'
  });

  port = 8077;

  status = {
    file_id: void 0,
    file_name: void 0,
    host: void 0,
    page: void 0,
    users: []
  };

  app.use('/static', express["static"]('static'));

  app.get('/', function(req, res) {
    return res.sendFile(__dirname + '/static/index.html');
  });

  app.get('/pdf/:file_id', function(req, res) {
    return res.sendFile(__dirname + '/' + upload_dir + '/' + req.params.file_id);
  });

  app.post('/upload-pdf', upload.single('pdf'), function(req, res) {
    res.send('File uploaded: ' + req.file.originalname);
    status.file_id = req.file.filename;
    status.file_name = req.file.originalname;
    status.page = 1;
    status.host = req.body.host;
    return io.emit('status', status);
  });

  io.on('connection', function(socket) {
    console.log('user connected: ' + socket.id);
    add_user(socket);
    socket.emit('id', socket.id);
    io.emit('status', status);
    socket.on('disconnect', function() {
      console.log('user disconnected: ' + socket.id);
      if (socket.id === status.host) {
        fs.unlink(upload_dir + '/' + status.file_id, function(err) {
          if (err) {
            return console.error(err);
          }
        });
        status.file_id = void 0;
        status.file_name = void 0;
        status.host = void 0;
        status.page = void 0;
      }
      remove_user(socket);
      return io.emit('status', status);
    });
    socket.on('statusUpdate', function(data) {
      status = data;
      return io.emit('status', status);
    });
    socket.on('mousePosUpdate', function(data) {
      data.user_id = socket.id;
      return io.emit('mousePos', data);
    });
    socket.on('drawPath', function(data) {
      data.user_id = socket.id;
      return io.emit('drawPath', data);
    });
    return socket.on('refresh', function() {
      return io.emit('refresh');
    });
  });

  add_user = function(socket) {
    var j, len, ref, user;
    ref = status.users;
    for (j = 0, len = ref.length; j < len; j++) {
      user = ref[j];
      if (user.id === socket.id) {
        return;
      }
    }
    return status.users.push({
      id: socket.id,
      address: socket.conn.remoteAddress,
      color: randomcolor()
    });
  };

  remove_user = function(socket) {
    var i, j, len, ref, to_remove, user;
    to_remove = void 0;
    ref = status.users;
    for (i = j = 0, len = ref.length; j < len; i = ++j) {
      user = ref[i];
      if (user.id === socket.id) {
        to_remove = i;
        break;
      }
    }
    if (to_remove) {
      return status.users.splice(to_remove, 1);
    }
  };

  http.listen(port, function() {
    return console.log('listening on *:' + port);
  });

}).call(this);

//# sourceMappingURL=server.js.map
